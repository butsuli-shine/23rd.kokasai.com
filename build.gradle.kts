import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack
import org.jlleitschuh.gradle.ktlint.KtlintExtension

plugins {
    id(Libraries.GradlePlugin.application)
    id(Libraries.GradlePlugin.kotlin_multiplatform) version Versions.kotlin
    id(Libraries.GradlePlugin.shadow) version Versions.shadow
    id(Libraries.GradlePlugin.ktlint) version Versions.ktlint_gradle
    id(Libraries.GradlePlugin.versions) version Versions.versions
}

group = Packages.group
version = Packages.version

repositories {
    mavenCentral()
    jcenter()
}

kotlin {
    jvm {
        withJava()
    }

    js(IR) {
        binaries.executable()

        browser {
            webpackTask {
                outputFileName = "main.bundle.js"
            }
        }
    }

    sourceSets {
        val commonMain by getting {
            dependencies {
                implementation(Libraries.Kotlin.stdlib)
            }
        }

        val jvmMain by getting {
            repositories {
                maven(url = Libraries.FlowerKt.repositoryUrl)
            }

            dependencies {
                implementation(Libraries.Ktor.client_okhttp)
                implementation(Libraries.Ktor.server_netty)
                implementation(Libraries.Ktor.server_sessions)
                implementation(Libraries.Ktor.gson)
                implementation(Libraries.FlowerKt.auth)
                implementation(Libraries.FlowerKt.core)
                implementation(Libraries.FlowerKt.css)
                implementation(Libraries.FlowerKt.database_sqlite)
                implementation(Libraries.FlowerKt.file_webdav)
                implementation(Libraries.FlowerKt.html)
                implementation(Libraries.FlowerKt.session_exposed)
                implementation(Libraries.FlowerKt.websocket)
                implementation(Libraries.logback)
            }
        }

        val jsMain by getting {
            dependencies {
            }
        }
    }
}

tasks {
    withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
        kotlinOptions {
            jvmTarget = Packages.jvm_target
        }
    }
}

application {
    mainClassName = Packages.main_class
}

tasks.withType<Jar> {
    manifest {
        attributes(
            mapOf(
                "Main-Class" to Packages.main_class
            )
        )
    }
}

// include JS artifacts in any JAR we generate
tasks.getByName<Jar>("jvmJar") {
    val taskName = if (project.hasProperty("isProduction")) {
        "jsBrowserProductionWebpack"
    } else {
        "jsBrowserDevelopmentWebpack"
    }
    val webpackTask = tasks.getByName<KotlinWebpack>(taskName)
    dependsOn(webpackTask) // make sure JS gets compiled first
    from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) // bring output file along into the JAR
}

tasks.getByName<JavaExec>("run") {
    classpath(tasks.getByName<Jar>("jvmJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
}

configure<KtlintExtension> {
    version.set(Versions.ktlint)
}
